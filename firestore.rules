rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read: if request.auth != null;  // Allow all authenticated users to read
      allow write: if request.auth != null && request.auth.uid == userId;  // Only allow users to write their own data
    }
    
    match /pythonChallenges/{challengeId} {
      allow read: if request.auth != null;
    }
    match /javascriptChallenges/{challengeId} {
      allow read: if request.auth != null;
    }
    
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['title', 'body', 'type', 'difficulty', 'userId', 'createdAt', 'likes', 'commentCount']) &&
        request.resource.data.title is string &&
        request.resource.data.body is string &&
        request.resource.data.type in ['message', 'python_challenge', 'js_challenge'] &&
        request.resource.data.difficulty in ['beginner', 'intermediate', 'advanced'] &&
        request.resource.data.likes == 0 &&
        request.resource.data.commentCount == 0;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      
      match /comments/{commentId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && 
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.keys().hasAll(['content', 'userId', 'createdAt']);
        allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      }
    }
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}